import React, { useState } from 'react';
import { 
  Plus, 
  MessageSquare, 
  Settings, 
  Palette, 
  FileText, 
  ChevronLeft,
  ChevronRight,
  MoreVertical,
  Check,
  X,
  Bot,
  User,
  Code,
  Image,
  Calendar,
  BookOpen,
  Share2,
  Copy,
  Archive,
  Pin,
  Star,
  Download,
  Edit2,
  Trash2,
  Brain
} from 'lucide-react';
import { ChatSession } from '../types';
import { ContextMenu, useContextMenu, ContextMenuOption } from './ContextMenu';

interface SidebarProps {
  isOpen: boolean;
  sessions: ChatSession[];
  activeSessionId: string;
  onToggle: () => void;
  onSessionSelect: (sessionId: string) => void;
  onCreateSession: () => void;
  onDeleteSession: (sessionId: string) => void;
  onRenameSession: (sessionId: string, newName: string) => void;
  onArchiveSession: (sessionId: string) => void;
  onOpenSettings: () => void;
  onOpenCustomization: () => void;
  onOpenBrains: () => void;
  onOpenArchive: () => void;
  theme: any;
}

export const Sidebar: React.FC<SidebarProps> = ({
  isOpen,
  sessions,
  activeSessionId,
  onToggle,
  onSessionSelect,
  onCreateSession,
  onDeleteSession,
  onRenameSession,
  onArchiveSession,
  onOpenSettings,
  onOpenCustomization,
  onOpenBrains,
  onOpenArchive,
  theme,
}) => {
  const [editingSession, setEditingSession] = useState<string | null>(null);
  const [editName, setEditName] = useState('');
  const { contextMenu, openContextMenu, closeContextMenu } = useContextMenu();

  const exportToPDF = (session: ChatSession) => {
    // Create PDF content
    const content = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>${session.name} - Alaka Chat Export</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
    }
    .header {
      border-bottom: 2px solid #eee;
      padding-bottom: 20px;
      margin-bottom: 30px;
    }
    .chat-title {
      font-size: 24px;
      font-weight: bold;
      color: #2563eb;
      margin: 0;
    }
    .chat-meta {
      color: #666;
      font-size: 14px;
      margin-top: 5px;
    }
    .message {
      margin-bottom: 20px;
      padding: 15px;
      border-radius: 12px;
    }
    .user-message {
      background-color: #f0f9ff;
      border-left: 4px solid #2563eb;
      margin-left: 20%;
    }
    .ai-message {
      background-color: #f9fafb;
      border-left: 4px solid #6b7280;
      margin-right: 20%;
    }
    .message-header {
      font-weight: bold;
      margin-bottom: 8px;
      font-size: 14px;
    }
    .user-header {
      color: #2563eb;
    }
    .ai-header {
      color: #6b7280;
    }
    .message-content {
      white-space: pre-wrap;
      word-wrap: break-word;
    }
    .timestamp {
      font-size: 12px;
      color: #9ca3af;
      margin-top: 8px;
    }
    .footer {
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #eee;
      text-align: center;
      color: #666;
      font-size: 12px;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1 class="chat-title">${session.name}</h1>
    <div class="chat-meta">
      Exported from Alaka â€¢ ${new Date().toLocaleDateString()} â€¢ ${session.messages.length} messages
    </div>
  </div>
  
  <div class="messages">
    ${session.messages.map(message => `
      <div class="message ${message.type === 'user' ? 'user-message' : 'ai-message'}">
        <div class="message-header ${message.type === 'user' ? 'user-header' : 'ai-header'}">
          ${message.type === 'user' ? 'ðŸ‘¤ You' : 'ðŸ¤– Alaka'}
        </div>
        <div class="message-content">${message.content}</div>
        <div class="timestamp">${message.timestamp.toLocaleString()}</div>
      </div>
    `).join('')}
  </div>
  
  <div class="footer">
    Generated by Alaka - Your Private AI Assistant
  </div>
</body>
</html>
    `.trim();

    // Create and download PDF
    const blob = new Blob([content], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${session.name.replace(/[^a-z0-9]/gi, '_').toLowerCase()}_chat_export.html`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    // Show success notification (you could add a toast notification here)
    console.log(`Exported "${session.name}" to PDF-ready HTML file`);
  };

  const handleEditStart = (session: ChatSession) => {
    setEditingSession(session.id);
    setEditName(session.name);
  };

  const handleEditSave = () => {
    if (editingSession && editName.trim()) {
      onRenameSession(editingSession, editName.trim());
    }
    setEditingSession(null);
  };

  const handleEditCancel = () => {
    setEditingSession(null);
    setEditName('');
  };

  const sidebarStyle = theme.glassmorphism
    ? {
        backgroundColor: 'rgba(8, 8, 8, 0.95)',
        backdropFilter: 'blur(24px)',
      }
    : {
        backgroundColor: '#0a0a0a',
      };

  const getSessionIcon = (session: ChatSession) => {
    if (session.messages.some(m => m.content.includes('code') || m.content.includes('```'))) {
      return <Code size={18} className="text-emerald-400" />;
    }
    if (session.messages.some(m => m.content.includes('image') || m.content.includes('photo'))) {
      return <Image size={18} className="text-purple-400" />;
    }
    return <MessageSquare size={18} className="text-blue-400" />;
  };

  const getSessionContextMenuOptions = (session: ChatSession): ContextMenuOption[] => [
    {
      id: 'rename',
      label: 'Rename',
      icon: <Edit2 size={16} />,
      action: () => handleEditStart(session),
    },
    {
      id: 'duplicate',
      label: 'Duplicate',
      icon: <Copy size={16} />,
      action: () => {
        // TODO: Implement duplicate functionality
        console.log('Duplicate session:', session.id);
      },
    },
    {
      id: 'share',
      label: 'Share',
      icon: <Share2 size={16} />,
      action: () => {
        // TODO: Implement share functionality
        console.log('Share session:', session.id);
      },
    },
    {
      id: 'export-pdf',
      label: 'Export to PDF',
      icon: <FileText size={16} />,
      action: () => exportToPDF(session),
    },
    {
      id: 'pin',
      label: 'Pin to Top',
      icon: <Pin size={16} />,
      action: () => {
        // TODO: Implement pin functionality
        console.log('Pin session:', session.id);
      },
    },
    {
      id: 'archive',
      label: 'Archive',
      icon: <Archive size={16} />,
      action: () => onArchiveSession(session.id),
    },
    {
      id: 'separator',
      label: '',
      icon: null,
      action: () => {},
    },
    {
      id: 'delete',
      label: 'Delete',
      icon: <Trash2 size={16} />,
      action: () => onDeleteSession(session.id),
      variant: 'danger' as const,
    },
  ];

  const getNewChatContextMenuOptions = (): ContextMenuOption[] => [
    {
      id: 'new-chat',
      label: 'New Chat',
      icon: <MessageSquare size={16} />,
      action: onCreateSession,
    },
    {
      id: 'new-document',
      label: 'New Document',
      icon: <FileText size={16} />,
      action: () => {
        // TODO: Implement document mode creation
        onCreateSession();
        console.log('Create new document');
      },
    },
    {
      id: 'import',
      label: 'Import Chat',
      icon: <Copy size={16} />,
      action: () => {
        // TODO: Implement import functionality
        console.log('Import chat');
      },
    },
  ];
  const IconButton: React.FC<{
    icon: React.ReactNode;
    onClick: () => void;
    onContextMenu?: (event: React.MouseEvent) => void;
    title: string;
    isActive?: boolean;
    variant?: 'primary' | 'secondary';
    className?: string;
  }> = ({ icon, onClick, onContextMenu, title, isActive = false, variant = 'secondary', className = '' }) => {
    const baseClasses = "w-12 h-12 flex items-center justify-center rounded-xl transition-all duration-200 transform hover:scale-105 active:scale-95";
    
    const variantClasses = variant === 'primary'
      ? "bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-500 hover:to-blue-400 text-white shadow-lg hover:shadow-xl"
      : isActive
      ? "bg-blue-600/25 border border-blue-600/40 text-blue-400 shadow-lg"
      : "hover:bg-white/8 text-gray-400 hover:text-white hover:shadow-md";

    const handleClick = (e: React.MouseEvent) => {
      if (e.ctrlKey || e.metaKey) {
        onContextMenu?.(e);
      } else {
        onClick();
      }
    };
    return (
      <button
        onClick={handleClick}
        onContextMenu={onContextMenu}
        title={title}
        className={`${baseClasses} ${variantClasses} ${className}`}
      >
        {icon}
      </button>
    );
  };

  if (!isOpen) {
    return null;
  }

  return (
    <>
      {/* Expanded Sidebar */}
      <div
        className="h-full w-80 flex flex-col transition-all duration-300 ease-in-out pt-24"
        style={sidebarStyle}
      >
        {/* Header */}
        <div className="p-6 border-b border-gray-700/30">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h2 className="text-xl font-semibold text-white mb-1">Conversations</h2>
              <p className="text-sm text-gray-400">Your private chat history</p>
            </div>
          </div>
          
          <button
            onClick={onCreateSession}
            className="w-full flex items-center gap-3 p-4 rounded-xl bg-gray-700/50 hover:bg-gray-600/50 border border-gray-600/50 hover:border-gray-500/50 transition-all duration-200 text-gray-200 hover:text-white shadow-sm hover:shadow-md"
          >
            <Plus size={20} className="flex-shrink-0" />
            <span className="font-medium">New Chat</span>
          </button>
        </div>

        {/* Sessions List */}
        <div className="flex-1 overflow-y-auto p-4 space-y-2">
          {sessions.map((session) => (
            <div
              key={session.id}
              className={`group relative p-4 rounded-xl cursor-pointer transition-all duration-200 hover:scale-[1.02] ${
                session.id === activeSessionId
                  ? 'bg-gradient-to-r from-blue-600/25 to-blue-500/20 border border-blue-600/40 shadow-lg'
                  : 'hover:bg-white/5 hover:shadow-md'
              }`}
              onClick={() => onSessionSelect(session.id)}
              onContextMenu={(e) => openContextMenu(e, getSessionContextMenuOptions(session))}
            >
              <div className="flex items-center gap-3">
                {getSessionIcon(session)}
                {editingSession === session.id ? (
                  <div className="flex-1 flex items-center gap-2">
                    <input
                      value={editName}
                      onChange={(e) => setEditName(e.target.value)}
                      className="flex-1 bg-transparent text-white text-sm outline-none border-b border-gray-600 focus:border-blue-400 pb-1"
                      onKeyDown={(e) => {
                        if (e.key === 'Enter') handleEditSave();
                        if (e.key === 'Escape') handleEditCancel();
                      }}
                      autoFocus
                    />
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleEditSave();
                      }}
                      className="p-1.5 hover:bg-green-600/20 rounded-lg transition-colors"
                      title="Save"
                    >
                      <Check size={14} className="text-green-400" />
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        handleEditCancel();
                      }}
                      className="p-1.5 hover:bg-red-600/20 rounded-lg transition-colors"
                      title="Cancel"
                    >
                      <X size={14} className="text-red-400" />
                    </button>
                  </div>
                ) : (
                  <>
                    <div className="flex-1 min-w-0">
                      <div className="text-white text-sm font-medium truncate mb-1">
                        {session.name}
                      </div>
                      <div className="flex items-center gap-2 text-xs text-gray-400">
                        <Calendar size={12} />
                        <span>{session.updatedAt.toLocaleDateString()}</span>
                        <span>â€¢</span>
                        <span>{session.messages.length} messages</span>
                      </div>
                    </div>
                    <div className="flex opacity-0 group-hover:opacity-100 transition-opacity">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          openContextMenu(e, getSessionContextMenuOptions(session));
                        }}
                        className="p-1.5 hover:bg-gray-600/20 rounded-lg transition-colors"
                        title="More options"
                      >
                        <MoreVertical size={14} className="text-gray-400" />
                      </button>
                    </div>
                  </>
                )}
              </div>
            </div>
          ))}
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-gray-700/30 space-y-2">
          <button
            onClick={onOpenBrains}
            className="w-full flex items-center gap-3 p-3 rounded-xl hover:bg-white/5 transition-all duration-200 text-gray-300 hover:text-white hover:shadow-md"
            title="Brains"
          >
            <Brain size={18} className="flex-shrink-0" />
            <span>Brains</span>
          </button>
          <button
            onClick={onOpenArchive}
            className="w-full flex items-center gap-3 p-3 rounded-xl hover:bg-white/5 transition-all duration-200 text-gray-300 hover:text-white hover:shadow-md"
            title="Archive"
          >
            <Archive size={18} className="flex-shrink-0" />
            <span>Archive</span>
          </button>
          <button
            onClick={onOpenCustomization}
            className="w-full flex items-center gap-3 p-3 rounded-xl hover:bg-white/5 transition-all duration-200 text-gray-300 hover:text-white hover:shadow-md"
            title="Customize"
          >
            <Palette size={18} className="flex-shrink-0" />
            <span>Customize</span>
          </button>
          <button
            onClick={onOpenSettings}
            className="w-full flex items-center gap-3 p-3 rounded-xl hover:bg-white/5 transition-all duration-200 text-gray-300 hover:text-white hover:shadow-md"
            title="Settings"
          >
            <Settings size={18} className="flex-shrink-0" />
            <span>Settings</span>
          </button>
        </div>
      </div>

      {/* Context Menu */}
      <ContextMenu
        isOpen={contextMenu.isOpen}
        position={contextMenu.position}
        onClose={closeContextMenu}
        options={contextMenu.options}
        theme={theme}
      />
    </>
  );
};